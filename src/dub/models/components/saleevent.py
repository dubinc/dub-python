"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dub.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class SaleEventEvent(str, Enum):
    SALE = "sale"

class SaleEventTypedDict(TypedDict):
    timestamp: str
    event_id: str
    event_name: str
    customer_name: str
    customer_email: str
    customer_avatar: str
    payment_processor: str
    invoice_id: str
    sale_amount: float
    click_id: str
    link_id: str
    domain: str
    key: str
    url: str
    continent: Nullable[str]
    country: Nullable[str]
    city: Nullable[str]
    device: Nullable[str]
    browser: Nullable[str]
    os: Nullable[str]
    referer: Nullable[str]
    qr: Nullable[float]
    ip: Nullable[str]
    event: NotRequired[SaleEventEvent]
    

class SaleEvent(BaseModel):
    timestamp: str
    event_id: str
    event_name: str
    customer_name: str
    customer_email: str
    customer_avatar: str
    payment_processor: str
    invoice_id: str
    sale_amount: Annotated[float, pydantic.Field(alias="saleAmount")]
    click_id: str
    link_id: str
    domain: str
    key: str
    url: str
    continent: Nullable[str]
    country: Nullable[str]
    city: Nullable[str]
    device: Nullable[str]
    browser: Nullable[str]
    os: Nullable[str]
    referer: Nullable[str]
    qr: Nullable[float]
    ip: Nullable[str]
    event: Optional[SaleEventEvent] = SaleEventEvent.SALE
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["event"]
        nullable_fields = ["continent", "country", "city", "device", "browser", "os", "referer", "qr", "ip"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

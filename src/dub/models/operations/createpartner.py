"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dub.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Country(str, Enum):
    r"""Country where the partner is based."""

    AF = "AF"
    AL = "AL"
    DZ = "DZ"
    AS = "AS"
    AD = "AD"
    AO = "AO"
    AI = "AI"
    AQ = "AQ"
    AG = "AG"
    AR = "AR"
    AM = "AM"
    AW = "AW"
    AU = "AU"
    AT = "AT"
    AZ = "AZ"
    BS = "BS"
    BH = "BH"
    BD = "BD"
    BB = "BB"
    BY = "BY"
    BE = "BE"
    BZ = "BZ"
    BJ = "BJ"
    BM = "BM"
    BT = "BT"
    BO = "BO"
    BA = "BA"
    BW = "BW"
    BV = "BV"
    BR = "BR"
    IO = "IO"
    BN = "BN"
    BG = "BG"
    BF = "BF"
    BI = "BI"
    KH = "KH"
    CM = "CM"
    CA = "CA"
    CV = "CV"
    KY = "KY"
    CF = "CF"
    TD = "TD"
    CL = "CL"
    CN = "CN"
    CX = "CX"
    CC = "CC"
    CO = "CO"
    KM = "KM"
    CG = "CG"
    CD = "CD"
    CK = "CK"
    CR = "CR"
    CI = "CI"
    HR = "HR"
    CU = "CU"
    CY = "CY"
    CZ = "CZ"
    DK = "DK"
    DJ = "DJ"
    DM = "DM"
    DO = "DO"
    EC = "EC"
    EG = "EG"
    SV = "SV"
    GQ = "GQ"
    ER = "ER"
    EE = "EE"
    ET = "ET"
    FK = "FK"
    FO = "FO"
    FJ = "FJ"
    FI = "FI"
    FR = "FR"
    GF = "GF"
    PF = "PF"
    TF = "TF"
    GA = "GA"
    GM = "GM"
    GE = "GE"
    DE = "DE"
    GH = "GH"
    GI = "GI"
    GR = "GR"
    GL = "GL"
    GD = "GD"
    GP = "GP"
    GU = "GU"
    GT = "GT"
    GN = "GN"
    GW = "GW"
    GY = "GY"
    HT = "HT"
    HM = "HM"
    VA = "VA"
    HN = "HN"
    HK = "HK"
    HU = "HU"
    IS = "IS"
    IN = "IN"
    ID = "ID"
    IR = "IR"
    IQ = "IQ"
    IE = "IE"
    IL = "IL"
    IT = "IT"
    JM = "JM"
    JP = "JP"
    JO = "JO"
    KZ = "KZ"
    KE = "KE"
    KI = "KI"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KG = "KG"
    LA = "LA"
    LV = "LV"
    LB = "LB"
    LS = "LS"
    LR = "LR"
    LY = "LY"
    LI = "LI"
    LT = "LT"
    LU = "LU"
    MO = "MO"
    MG = "MG"
    MW = "MW"
    MY = "MY"
    MV = "MV"
    ML = "ML"
    MT = "MT"
    MH = "MH"
    MQ = "MQ"
    MR = "MR"
    MU = "MU"
    YT = "YT"
    MX = "MX"
    FM = "FM"
    MD = "MD"
    MC = "MC"
    MN = "MN"
    MS = "MS"
    MA = "MA"
    MZ = "MZ"
    MM = "MM"
    NA = "NA"
    NR = "NR"
    NP = "NP"
    NL = "NL"
    NC = "NC"
    NZ = "NZ"
    NI = "NI"
    NE = "NE"
    NG = "NG"
    NU = "NU"
    NF = "NF"
    MK = "MK"
    MP = "MP"
    NO = "NO"
    OM = "OM"
    PK = "PK"
    PW = "PW"
    PS = "PS"
    PA = "PA"
    PG = "PG"
    PY = "PY"
    PE = "PE"
    PH = "PH"
    PN = "PN"
    PL = "PL"
    PT = "PT"
    PR = "PR"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RU = "RU"
    RW = "RW"
    SH = "SH"
    KN = "KN"
    LC = "LC"
    PM = "PM"
    VC = "VC"
    WS = "WS"
    SM = "SM"
    ST = "ST"
    SA = "SA"
    SN = "SN"
    SC = "SC"
    SL = "SL"
    SG = "SG"
    SK = "SK"
    SI = "SI"
    SB = "SB"
    SO = "SO"
    ZA = "ZA"
    GS = "GS"
    ES = "ES"
    LK = "LK"
    SD = "SD"
    SR = "SR"
    SJ = "SJ"
    SZ = "SZ"
    SE = "SE"
    CH = "CH"
    SY = "SY"
    TW = "TW"
    TJ = "TJ"
    TZ = "TZ"
    TH = "TH"
    TL = "TL"
    TG = "TG"
    TK = "TK"
    TO = "TO"
    TT = "TT"
    TN = "TN"
    TR = "TR"
    TM = "TM"
    TC = "TC"
    TV = "TV"
    UG = "UG"
    UA = "UA"
    AE = "AE"
    GB = "GB"
    US = "US"
    UM = "UM"
    UY = "UY"
    UZ = "UZ"
    VU = "VU"
    VE = "VE"
    VN = "VN"
    VG = "VG"
    VI = "VI"
    WF = "WF"
    EH = "EH"
    YE = "YE"
    ZM = "ZM"
    ZW = "ZW"
    AX = "AX"
    BQ = "BQ"
    CW = "CW"
    GG = "GG"
    IM = "IM"
    JE = "JE"
    ME = "ME"
    BL = "BL"
    MF = "MF"
    RS = "RS"
    SX = "SX"
    SS = "SS"
    XK = "XK"


class CreatePartnerRequestBodyTypedDict(TypedDict):
    program_id: str
    r"""The ID of the program to create a partner for."""
    name: str
    r"""Full legal name of the partner."""
    email: str
    r"""Email for the partner in your system. Partners will be able to claim their profile by signing up to Dub Partners with this email."""
    username: str
    r"""A unique username for the partner in your system. This will be used to create a short link for the partner using your program's default domain."""
    image: NotRequired[Nullable[str]]
    r"""Avatar image for the partner – if not provided, a default avatar will be used."""
    country: NotRequired[Nullable[Country]]
    r"""Country where the partner is based."""
    description: NotRequired[Nullable[str]]
    r"""A brief description of the partner and their background."""


class CreatePartnerRequestBody(BaseModel):
    program_id: Annotated[str, pydantic.Field(alias="programId")]
    r"""The ID of the program to create a partner for."""

    name: str
    r"""Full legal name of the partner."""

    email: str
    r"""Email for the partner in your system. Partners will be able to claim their profile by signing up to Dub Partners with this email."""

    username: str
    r"""A unique username for the partner in your system. This will be used to create a short link for the partner using your program's default domain."""

    image: OptionalNullable[str] = UNSET
    r"""Avatar image for the partner – if not provided, a default avatar will be used."""

    country: OptionalNullable[Country] = UNSET
    r"""Country where the partner is based."""

    description: OptionalNullable[str] = UNSET
    r"""A brief description of the partner and their background."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["image", "country", "description"]
        nullable_fields = ["image", "country", "description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class Status(str, Enum):
    APPROVED = "approved"
    PENDING = "pending"
    REJECTED = "rejected"


class CreatePartnerLinkTypedDict(TypedDict):
    id: str
    r"""The unique ID of the short link."""
    short_link: str
    r"""The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`)."""
    domain: str
    r"""The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."""
    key: str
    r"""The short link slug. If not provided, a random 7-character slug will be generated."""
    url: str
    r"""The destination URL of the short link."""
    clicks: NotRequired[float]
    r"""The number of clicks on the short link."""
    leads: NotRequired[float]
    r"""The number of leads the short links has generated."""
    sales: NotRequired[float]
    r"""The number of sales the short links has generated."""
    sale_amount: NotRequired[float]
    r"""The total dollar amount of sales the short links has generated (in cents)."""


class CreatePartnerLink(BaseModel):
    id: str
    r"""The unique ID of the short link."""

    short_link: Annotated[str, pydantic.Field(alias="shortLink")]
    r"""The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`)."""

    domain: str
    r"""The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."""

    key: str
    r"""The short link slug. If not provided, a random 7-character slug will be generated."""

    url: str
    r"""The destination URL of the short link."""

    clicks: Optional[float] = 0
    r"""The number of clicks on the short link."""

    leads: Optional[float] = 0
    r"""The number of leads the short links has generated."""

    sales: Optional[float] = 0
    r"""The number of sales the short links has generated."""

    sale_amount: Annotated[Optional[float], pydantic.Field(alias="saleAmount")] = 0
    r"""The total dollar amount of sales the short links has generated (in cents)."""


class CreatePartnerType(str, Enum):
    PERCENTAGE = "percentage"
    FLAT = "flat"


class CreatePartnerInterval(str, Enum):
    MONTH = "month"
    YEAR = "year"


class CreatePartnerDiscountTypedDict(TypedDict):
    id: str
    coupon_id: Nullable[str]
    coupon_test_id: Nullable[str]
    amount: float
    type: CreatePartnerType
    duration: Nullable[float]
    interval: Nullable[CreatePartnerInterval]


class CreatePartnerDiscount(BaseModel):
    id: str

    coupon_id: Annotated[Nullable[str], pydantic.Field(alias="couponId")]

    coupon_test_id: Annotated[Nullable[str], pydantic.Field(alias="couponTestId")]

    amount: float

    type: CreatePartnerType

    duration: Nullable[float]

    interval: Nullable[CreatePartnerInterval]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["couponId", "couponTestId", "duration", "interval"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreatePartnerResponseBodyTypedDict(TypedDict):
    r"""The created partner"""

    id: str
    name: str
    email: Nullable[str]
    image: Nullable[str]
    country: str
    bio: Nullable[str]
    stripe_connect_id: Nullable[str]
    payouts_enabled: bool
    created_at: str
    updated_at: str
    status: Status
    link: Nullable[CreatePartnerLinkTypedDict]
    commission_amount: Nullable[float]
    earnings: float
    coupon_id: NotRequired[Nullable[str]]
    discount: NotRequired[Nullable[CreatePartnerDiscountTypedDict]]


class CreatePartnerResponseBody(BaseModel):
    r"""The created partner"""

    id: str

    name: str

    email: Nullable[str]

    image: Nullable[str]

    country: str

    bio: Nullable[str]

    stripe_connect_id: Annotated[Nullable[str], pydantic.Field(alias="stripeConnectId")]

    payouts_enabled: Annotated[bool, pydantic.Field(alias="payoutsEnabled")]

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]

    updated_at: Annotated[str, pydantic.Field(alias="updatedAt")]

    status: Status

    link: Nullable[CreatePartnerLink]

    commission_amount: Annotated[
        Nullable[float], pydantic.Field(alias="commissionAmount")
    ]

    earnings: float

    coupon_id: Annotated[OptionalNullable[str], pydantic.Field(alias="couponId")] = (
        UNSET
    )

    discount: OptionalNullable[CreatePartnerDiscount] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["couponId", "discount"]
        nullable_fields = [
            "email",
            "image",
            "bio",
            "stripeConnectId",
            "link",
            "commissionAmount",
            "couponId",
            "discount",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

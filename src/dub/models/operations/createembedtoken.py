"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dub.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateEmbedTokenRequestBodyTypedDict(TypedDict):
    program_id: str
    partner_id: NotRequired[Nullable[str]]
    tenant_id: NotRequired[Nullable[str]]


class CreateEmbedTokenRequestBody(BaseModel):
    program_id: Annotated[str, pydantic.Field(alias="programId")]

    partner_id: Annotated[OptionalNullable[str], pydantic.Field(alias="partnerId")] = (
        UNSET
    )

    tenant_id: Annotated[OptionalNullable[str], pydantic.Field(alias="tenantId")] = (
        UNSET
    )

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["partnerId", "tenantId"]
        nullable_fields = ["partnerId", "tenantId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateEmbedTokenResponseBodyTypedDict(TypedDict):
    r"""The created public embed token."""

    public_token: str
    expires: str


class CreateEmbedTokenResponseBody(BaseModel):
    r"""The created public embed token."""

    public_token: Annotated[str, pydantic.Field(alias="publicToken")]

    expires: str

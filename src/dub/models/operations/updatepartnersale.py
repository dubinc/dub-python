"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dub.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdatePartnerSaleRequestBodyTypedDict(TypedDict):
    program_id: str
    invoice_id: str
    amount: NotRequired[float]
    r"""The new absolute amount for the sale."""
    modify_amount: NotRequired[float]
    r"""Modify the current sale amount: use positive values to increase the amount, negative values to decrease it."""


class UpdatePartnerSaleRequestBody(BaseModel):
    program_id: Annotated[str, pydantic.Field(alias="programId")]

    invoice_id: Annotated[str, pydantic.Field(alias="invoiceId")]

    amount: Optional[float] = None
    r"""The new absolute amount for the sale."""

    modify_amount: Annotated[Optional[float], pydantic.Field(alias="modifyAmount")] = (
        None
    )
    r"""Modify the current sale amount: use positive values to increase the amount, negative values to decrease it."""


class UpdatePartnerSaleStatus(str, Enum):
    PENDING = "pending"
    PROCESSED = "processed"
    PAID = "paid"
    REFUNDED = "refunded"
    DUPLICATE = "duplicate"
    FRAUD = "fraud"


class UpdatePartnerSaleResponseBodyTypedDict(TypedDict):
    r"""The updated sale."""

    id: str
    amount: float
    earnings: float
    currency: str
    status: UpdatePartnerSaleStatus
    created_at: str
    updated_at: str
    invoice_id: NotRequired[Nullable[str]]


class UpdatePartnerSaleResponseBody(BaseModel):
    r"""The updated sale."""

    id: str

    amount: float

    earnings: float

    currency: str

    status: UpdatePartnerSaleStatus

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]

    updated_at: Annotated[str, pydantic.Field(alias="updatedAt")]

    invoice_id: Annotated[OptionalNullable[str], pydantic.Field(alias="invoiceId")] = (
        UNSET
    )

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["invoiceId"]
        nullable_fields = ["invoiceId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

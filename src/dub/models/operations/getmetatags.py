"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from dub.types import BaseModel, Nullable
from dub.utils import FieldMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import Annotated


class GetMetatagsRequestTypedDict(TypedDict):
    url: str
    r"""The URL to retrieve metatags for."""
    

class GetMetatagsRequest(BaseModel):
    url: Annotated[str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    r"""The URL to retrieve metatags for."""
    

class GetMetatagsResponseBodyTypedDict(TypedDict):
    r"""The retrieved metatags"""
    
    title: Nullable[str]
    r"""The meta title tag for the URL."""
    description: Nullable[str]
    r"""The meta description tag for the URL."""
    image: Nullable[str]
    r"""The OpenGraph image for the URL."""
    

class GetMetatagsResponseBody(BaseModel):
    r"""The retrieved metatags"""
    
    title: Nullable[str]
    r"""The meta title tag for the URL."""
    description: Nullable[str]
    r"""The meta description tag for the URL."""
    image: Nullable[str]
    r"""The OpenGraph image for the URL."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["title", "description", "image"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
